ID가 14인 직원보다 생일이 빠른 직원의 ID NAME BIRTHDATE.

SELECT birth_date FROM employee WHERE id = 14;
> 920804

SELECT id,name, birth_date FROM employee
WHERE birth_date < (
    SELECT birth_date FROM employee WHERE id = 14
)

> 뒤의 ()안의 쿼리를 서브쿼리, 밖의 쿼리를 outerquery라고함

===============
IN

ID 가 5인 임직원과 같은 프로젝트에 참여한 임직원들의 ID 반환

SELECT proj_id FROM work_on WHERE empl_id = 5; >2001,2002


SELECT DISTINCT empl_id FROM wokrs_on
WHERE empl_id != 5 AND (proj_id = 2001 or proj_id = 2002);

=> SELECT DISTINCT empl_id FROM wokrs_on
   WHERE empl_id != 5 AND proj_id IN (2001,2002);

   => SELECT DISTINCT empl_id FROM wokrs_on
         WHERE empl_id != 5 AND proj_id IN (
            SELECT proj_id FROM work_on WHERE empl_id = 5
         );

cf. IN 대신 NOT IN의 경우 서브쿼리안의 모든 값과 값이 다르다면 True 반환

==================

여기서 상기 참여 임직원의 ID와 이름은 Employee테이블에서 확인가능하므로,

SELEC id, name
FROM employee
WHERE id in (
        SELECT DISTINCT empl_id FROM wokrs_on
         WHERE empl_id != 5 AND proj_id IN (
            SELECT proj_id FROM work_on WHERE empl_id = 5
         )
);

처럼 표현이 가능하며
WHERE 절의 subquery를 FROM 절로 가져올 수 있다.

SELEC id, name
FROM employee,
 (
        SELECT DISTINCT empl_id FROM wokrs_on
         WHERE empl_id != 5 AND proj_id IN (
            SELECT proj_id FROM work_on WHERE empl_id = 5
         )
 )AS DSTNCT_E
         WHERE id = DSTNCT_E.empl_id;

====================

EXIST
ID가 7,12인 임직원이 참여한 프로젝트의 ID,NAME을 알고싶다.

SELECT P.id, P.name
FROM project P
WHERE EXIST(
    SELECT *
    FROM works_on W
    WHERE W.proj_id = P.id AND W.empl_id IN(7,12));

EXIST subquery의 결과가 하나라도 있다면 참을반환
NOT EXIST subquery의 결과가 하나의 row도 없다면 참을 반환

상기 쿼리는 IN을 써서 다음과같이 표현될 수 있다

SELECT P.id, P.name
FROM project P
WHERE id IN(
    SELECT W.proj_id
    FROM works_on W
    WHERE W.empl_id IN(7,12));

=============================

Any
value comparison_operator ANY (subquery) : subquery가 반환한 결과중 하나라도 v와 비교연산하여 true라면 TRUE반환 (some도 같은결과)

SELECT E.id,E.name,E.salary
FROM department D, employee E
WHERE D.leader_id = E.id AND E.salary <ANY(
    SELECT salary FROM employee WHERE id<> D.leader_id AND dept_id = E.dept_id
);

리더보다 급여가 많은 부서원이 존재하는 부서의 리더아이디,이름,급여를 반환하는 상기 쿼리에
    최고 많이받는 부서원의 급여도 상기 쿼리에서 하기와 같이 추가하여 반환 가능

SELECT E.id,E.name,E.salary
    (SELECT max(salary)
    FROM employee
    WHERE dept_id = E.dept_id
    ) AS dept_max_salary
FROM department D, employee E
WHERE D.leader_id = E.id AND E.salary <ANY(
    SELECT salary FROM employee WHERE id<> D.leader_id AND dept_id = E.dept_id
);

====================================

ALL
v comparison_operator ALL (subquery) : subquery가 반환한 결과와 v와 비교하여 모두 true라면 TRUE 반환

SELECT DISTINCT E.id,E.name, E.position
FROM employee E.works_on W
WHERE E.id = W.empl_id AND W.projj_id <> ALL(
    SEKECT proj_id
    FROM works_on
    WHERE empl_id = 13
);

플젝아디 13과 한번도(전부) 근무한적없는 자의
인 직원의 아이디 이름 직급


