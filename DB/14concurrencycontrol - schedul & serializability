schedule

transaction들이 동시에 실행될때 각 transaction에 속한 operation들의 실행순서


이 전의 100만원 계좌에서 20만원을 200만원계좌로 옮기는 동시에 30만원을 200만원에 입금하는경우


각 schedule내의 operations들의 순서는 바뀌지 않는다


serial schedule
transaction들이 겹치지 않고 한번에 하나씩 실행되는 schedule
>좋은성능을 낼 수 없고 현실적으로 사용할 수 없는 방식


nonserial schedule
transaction들이 겹쳐서 실행되는 schedule
>동시성이 높아져서 같은 시간에 더 많은 transaction들을 처리할 수 있다.

다만, 형태에 따라 이상한결과 (lost update)의 문제발생가능성이있다.
=> 그래서 serial schedule과 동일한 nonserial schedule을 실행하도록 함.

=========

conflict operation
세 조건을 모두 만족하면 conflict
1.서로 다른 transaction소속
2.같은 데이터에 접근
3.최소 하나는 write operation

> 순서가 바뀌면 결과가 바뀐다

conflict equivalent
두 조건 모두 만족하면 conflict equivalent
1. 두 schedule은 같은 transaction들을 가진다.
2. 어떤 conflict operations의 순서도 양쪽 schedule모두 동일하다.

nonserial schedule이 serial schedule과 conflict equivalent할때
"conflict serializability"라고함

=> nonserial schdule중 conflict serializable하면 실행가능하도록해서 성능과 오류가 없도록할 수 있으나,
그래서 그거 어케구현함? 실행시마다 확인하는게아니라 conflict serializable하도록 보장하는 protocol을 적용.

================

concurrency control => 어떤 스케쥴도 serializable하도록 만드 역할