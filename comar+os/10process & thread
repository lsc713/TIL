os는 process control block을 이용하여 여러프로세스의 실행순서나 자원배분과관련된 정보를 저장함.

process control block에는 대표적으로
1.processid 프로세스식별고유번호(같은프로그램2번실행해도 pid다름)
2.레지스터값
3.프로세스 상태 - 대기 준비 실행 등
4.cpu스케쥴정보 -언제 어떤순서로 cpu를 할당받을 것인지 기록
5.메모리관리정보 - 프로세스의 메모리주소를 알 수 있는 정보가 담긴다.
6.사용한 파일과 입출력장치목 등을 담음

문맥 - 프로세스수행을 재개하기위해 기억해야할 정보, pcb에 기록되는 정보.
cpu사용에 대해 다른 프로세스로 차례가 넘어가면 문맥교환이 일어남(pc백업 및 복구의 과정)

프로세스의 메모리영역은 아래로 나뉨
1.코드영역 : cpu가 수행할 명령어가 담겨있기 떄문에 readonly
2.데이터영역 : 프로그램이 실행되는동안 유지될 데이터가 저장된 공간
===========위는 정적할당영역, 아래는 동적할당영역
3.스택영역:매개변수 지역변수가 이곳에 일시적으로 저장되어 함수실행시 사라짐
4.힙영역: 프로그래머가 직접 할당할 수 있는 저장공간, 메모리 미반환시 메모리 낭비로서 메모리누수라고함

메모리할당시 보통 힙영역이랑 스택영역이랑 만나도록 메모리주소가할당됨, 새롭게할당되는 주소가 겹치지 않도록

=======================================================================================

cpu상태
1.생성상태 메모리에 적재되어 pcb받음
2.준비상태 차례기다리는중
준비-->실행 == 디스패치
3.실행상태 할당된 시간동안 cpu사용가능 다 작업안끝나서 타이머인터럽트발생시 준비상태가되며, 실행도중 입출력장치를 사용해서 입출력장치작업이 끝날때까지 기다려야하면 대기상태가됨.
4.대기상태 입출력이 완료되면 다시 준비상태가된다.
5.종료상태 pcb와 프로세스가 사용한 메모리 정리

프로세스 실행중 시스템호출을 통해 다른프로세스 생성가능. 부모 - 자식 프로세스로 계층적 구조를 띄게되며
fork(자기자신의 복사본을 자식프로세스로 생성하는 시스템호출)
exec을 통해 자신의 메모리공간을 다른프로그램으로 덮어씀(put) -exec안하고 같은 코드를 병행하여 실행할 수도 있다.
복사된 자식프로세스라도 PID값이나 저장된메모리위치는 다름

=====================

스레드 -멀티스레드는 프로세스의 자원을 공유
프로세스내에서 각기 다른 프로그램카운터 레지스터값,스택을 갖고있음.

멀티프로새스 - 메모리낭비 (쓰리기복사로 자원은 공유안하면서 메모리중복저장하지 않는 경우도 있다)//  멀티스레드 - 스레드간통신및 협력에 유리
다만 멀티스레드에서 하나의 스레드에 문제가생기면 프로세스 전체에 문제가 생길 수 있다
프로세스끼리도 자원공유가 가능은함.